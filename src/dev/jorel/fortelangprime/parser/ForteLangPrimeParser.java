/* ForteLangPrimeParser.java */
/* Generated By:JavaCC: Do not edit this line. ForteLangPrimeParser.java */
package dev.jorel.fortelangprime.parser;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.List;

import dev.jorel.fortelangprime.ast.FLPFunction;
import dev.jorel.fortelangprime.ast.FLPLibrary;
import dev.jorel.fortelangprime.ast.expressions.Expr;
import dev.jorel.fortelangprime.ast.expressions.ExprBoolLit;
import dev.jorel.fortelangprime.ast.expressions.ExprIntLit;
import dev.jorel.fortelangprime.ast.expressions.ExprStringLit;
import dev.jorel.fortelangprime.ast.types.Type;

public class ForteLangPrimeParser implements ForteLangPrimeParserConstants {

        public static FLPLibrary parse(String input) throws ParseException {
                InputStream inputStream = new ByteArrayInputStream(input.getBytes(Charset.forName("UTF-8")));
                return new ForteLangPrimeParser(inputStream).input();
        }

/** Main endpoint */
  final public FLPLibrary input() throws ParseException {FLPLibrary lib;
    lib = program();
    jj_consume_token(0);
{if ("" != null) return lib;}
    throw new Error("Missing return statement in function");
  }

  final public FLPLibrary program() throws ParseException {Token name; List<String> exports; List<FLPFunction> functions;
    jj_consume_token(LIBRARY);
    name = jj_consume_token(VAR_NAME);
    jj_consume_token(OPENCBRACE);
    exports = exports();
    jj_consume_token(CLOSECBRACE);
    functions = functions();
{if ("" != null) return new FLPLibrary(name.image, exports, functions);}
    throw new Error("Missing return statement in function");
  }

  final public List<String> exports() throws ParseException {List<String> exports = new ArrayList<String>(); Token t;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXPORT:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(EXPORT);
      t = jj_consume_token(VAR_NAME);
      jj_consume_token(SEMICOLON);
exports.add(t.image);
    }
{if ("" != null) return exports;}
    throw new Error("Missing return statement in function");
  }

  final public void epsilon() throws ParseException {
{ }
  }

  final public List<FLPFunction> functions() throws ParseException {List<FLPFunction> functions = new ArrayList<FLPFunction>();
        FLPFunction f;
    jj_consume_token(OPENCBRACE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR_NAME:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      f = functionDeclaration();
functions.add(f);
    }
    jj_consume_token(CLOSECBRACE);
{if ("" != null) return functions;}
    throw new Error("Missing return statement in function");
  }

  final public FLPFunction functionDeclaration() throws ParseException {Token name;
        Expr expr;
    name = jj_consume_token(VAR_NAME);
    types();
    jj_consume_token(EQUALS);
    expr = expression();
    jj_consume_token(SEMICOLON);
{if ("" != null) return new FLPFunction(name.image, new Type[0], null, expr);}
    throw new Error("Missing return statement in function");
  }

  final public ExprIntLit integer() throws ParseException {Token t;
    t = jj_consume_token(INT_LITERAL);
{if ("" != null) return new ExprIntLit(Integer.parseInt(t.image));}
    throw new Error("Missing return statement in function");
  }

  final public Expr expression() throws ParseException {Expr expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_LITERAL:{
      expr = integer();
{if ("" != null) return expr;}
      break;
      }
    case TRUE:
    case FALSE:{
      expr = bool();
{if ("" != null) return expr;}
      break;
      }
    case STRING:{
      expr = string();
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprBoolLit bool() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TRUE:{
      jj_consume_token(TRUE);
{if ("" != null) return new ExprBoolLit(true);}
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
{if ("" != null) return new ExprBoolLit(false);}
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ExprStringLit string() throws ParseException {Token t;
    t = jj_consume_token(STRING);
{if ("" != null) return new ExprStringLit(t.image.substring(1, t.image.length() - 1));}
    throw new Error("Missing return statement in function");
  }

  final public void types() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_NAME:{
      jj_consume_token(VAR_NAME);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(LCHEVRON);
    type();
    jj_consume_token(RCHEVRON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ARROW:{
      jj_consume_token(ARROW);
      types();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TYPE_INT:{
      jj_consume_token(TYPE_INT);
      break;
      }
    case TYPE_STRING:{
      jj_consume_token(TYPE_STRING);
      break;
      }
    case TYPE_BOOL:{
      jj_consume_token(TYPE_BOOL);
      break;
      }
    case OPENSBRACKET:{
      jj_consume_token(OPENSBRACKET);
      type();
      jj_consume_token(CLOSESBRACKET);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public ForteLangPrimeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[7];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0xc000000,0xc000000,0x0,0x200,0x3800020,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x1,0x4,0x28,0x0,0x4,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public ForteLangPrimeParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ForteLangPrimeParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ForteLangPrimeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ForteLangPrimeParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ForteLangPrimeParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new ForteLangPrimeParserTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ForteLangPrimeParser(ForteLangPrimeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ForteLangPrimeParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 7; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[43];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 7; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 43; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
