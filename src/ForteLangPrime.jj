options {
	STATIC = false;
}

PARSER_BEGIN(ForteLangPrime)

import java.util.LinkedList;
import java.util.List;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.HashMap;
import java.util.ListIterator;
import java.util.Stack;
import java.util.Scanner;
import java.util.Set;
import java.util.HashSet;

import java.util.regex.Pattern;

import java.io.FileInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.ByteArrayInputStream;

import java.nio.file.Files;

import java.io.InputStream;
import java.nio.charset.Charset;
import org.objectweb.asm.*;

public class ForteLangPrime {
	
	public static void parse(String input) {
	  	try { 
			InputStream inputStream = new ByteArrayInputStream(input.getBytes(Charset.forName("UTF-8")));
			//return new ForteLangPrime(inputStream).input(input);
		} catch(Exception e) {
		  	e.printStackTrace();
		  	//return null;
		}
	}
}

PARSER_END(ForteLangPrime)

//Symbols
TOKEN : { < OPENBRACKET : "(" > }
TOKEN : { < CLOSEBRACKET : ")" > }
TOKEN : { < OPENCBRACE : "{" > }
TOKEN : { < CLOSECBRACE : "}" > }
TOKEN : { < OPENSBRACKET : "[" > }
TOKEN : { < CLOSESBRACKET : "]" > }
TOKEN : { < COLON : ":" > }
TOKEN : { < ARROW : "->" > }
TOKEN : { < FAT_ARROW : "=>" > }
TOKEN : { < DOUBLE_ARROW : "->>" > }
TOKEN : { < PLAY_BUTTON : "|>" > }

//Operators
TOKEN : { < CONCAT : "++" > }
TOKEN : { < PLUS : "+" >}
TOKEN : { < ROUGHLY_EQUALS : "~=" > }

//Types
/*
Java's data types:
- byte, short, int, long, float, double
- char, boolean
*/
TOKEN : { < NUM : "Num" > }
TOKEN : { < BOOL : "Bool" > }
TOKEN : { < STRING : "String" > } //Strings and chars are the same thing, char[]
//TOKEN : { < LIST : "List" > } //We'll use the [] notation to denote a List
//TOKEN : { < SET : "Set" >} //We'll use the {} notation to denote a Set

//Keywords
TOKEN : { < MATCH : "match" > }

//Other
TOKEN : { < VAR_NAME : ["A"-"Z", "a"-"z", "@", "_"] (["A"-"Z", "a"-"z", "0"-"9", "_"])* (["\'"])* > }
TOKEN : { < NUMBER : (["0"-"9"])+ (["."])? (["0"-"9"])* > }

//Whitespace
SKIP : { "\n" | "\r" | " " | "\t" }

/** Main endpoint */
void input(String input) throws Exception : { } {
	//expr = expr()
	<EOF>
	//{ return expr; }
}

