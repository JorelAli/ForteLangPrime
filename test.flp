Library Sample {
	
	export not;
	export id;
	
} {

	type Color = {
		red<{
			a<Int>;
		}>;
		green<Int>;
		blue<a<b>>;
	}

	## Example of a binary tree
    ## Tree<T> = Node<{
    ##     lhs<Tree<T>>;
    ##     rhs<Tree<T>>;
    ## }> || Leaf<T>;

	## type IntPair = Pair<<Int>, <Int>>

	#[ A comment block ]#

	## Basic functions (returning simple parameters)
	justTwo <Int> = 2;
	aString <String> = "hello";
	someBool <Bool> = false;
	panicTest <Bool> = panic;

	## Functions with parameters
	paramFunction <Int> -> <Int> = 2;
	identity a<Int> -> <Int> = a;
	identity1 a3<Bool> -> <Bool> = a3;
	identity2 a2<String> -> <String> = a2;
	multiParam a1<Int> -> a2<String> -> <String> = a2;

	## Generics
	<T> id a<T> -> <T> = a;

	## Useful functions
	not input<Bool> -> <Bool> = if input then false else true;

	## If statements
	alwaysFalse <Bool> = if true then if true then false else true else true;

}