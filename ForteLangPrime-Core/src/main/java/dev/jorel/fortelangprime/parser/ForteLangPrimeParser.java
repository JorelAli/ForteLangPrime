/* ForteLangPrimeParser.java */
/* Generated by: ParserGeneratorCC: Do not edit this line. ForteLangPrimeParser.java */
 package dev.jorel.fortelangprime.parser;
 import java.io.ByteArrayInputStream;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.File;
 import java.io.InputStream;
 import java.io.IOException;
 import java.nio.charset.Charset;
 import java.util.ArrayList;
 import java.util.List;
 import dev.jorel.fortelangprime.ast.*;
 import dev.jorel.fortelangprime.ast.expressions.*;
 import dev.jorel.fortelangprime.ast.types.*;
 import dev.jorel.fortelangprime.ast.operation.*;
 import dev.jorel.fortelangprime.compiler.*;
 import dev.jorel.fortelangprime.util.*;

 public class ForteLangPrimeParser implements ForteLangPrimeParserConstants {
 private static UniversalContext universalContext;

 private static String currentFunctionName;

 public static FLPLibrary parse(String input) throws ParseException, IOException
 {
  universalContext = new UniversalContext();
  InputStream inputStream = new ByteArrayInputStream(input.getBytes(Charset.forName("UTF-8")));
  return new ForteLangPrimeParser(new StreamProvider(inputStream, Charset.forName("UTF-8"))).input();
 }

 public static FLPLibrary parse(File input) throws ParseException, FileNotFoundException, IOException
 {
  universalContext = new UniversalContext();
  return new ForteLangPrimeParser(new StreamProvider(new FileInputStream(input), Charset.forName("UTF-8"))).input();
 }

 public static UniversalContext getUniversalContext()
 {
  return ForteLangPrimeParser.universalContext;
 }

  final private FLPLibrary input() throws ParseException {FLPLibrary lib;
    lib = program();
    jj_consume_token(0);
{if ("" != null) return lib;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private FLPLibrary program() throws ParseException {Token name;
 List < String > exports;
 CodeableClass thingToEmit;
 FLPFunction f;
 List < CodeableClass > thingsToEmit = new ArrayList < CodeableClass > ();
    jj_consume_token(LIBRARY);
    name = jj_consume_token(VAR_NAME);
    jj_consume_token(OPENCBRACE);
    exports = exports();
    jj_consume_token(CLOSECBRACE);
    jj_consume_token(OPENCBRACE);
    label_1:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PRINTABLE:
      case EQUATABLE:
      case TYPE:
      case INFIX:
      case INFIXL:
      case INFIXR:
      case VAR_NAME:{
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case INFIX:
      case INFIXL:
      case INFIXR:{
        thingToEmit = customOperator();
thingsToEmit.add(thingToEmit);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        if (jj_2_1(3)) {
          thingToEmit = typeDeclaration();
thingsToEmit.add(thingToEmit);
        } else {
          switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
          case PRINTABLE:
          case EQUATABLE:
          case TYPE:{
            thingToEmit = algebraicDataType();
thingsToEmit.add(thingToEmit);
            break;
            }
          case VAR_NAME:{
            f = functionDeclaration();
for (CodeableClass c : thingsToEmit)
   {
    if (c instanceof FLPFunction)
    {
     FLPFunction function = (FLPFunction) c;
     if (function.getName().equals(f.getName()))
     {
      throw new ParseException("Tried to declare function " + f.getName() + " on line " + f.getLineNumber() + " but it has already been declared on line " + function.getLineNumber());
     }
    }
   }
   thingsToEmit.add(f);
            break;
            }
          default:
            jj_la1[2] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
    jj_consume_token(CLOSECBRACE);
{if ("" != null) return new FLPLibrary(name.image, exports, thingsToEmit);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private List < String > exports() throws ParseException {List < String > exports = new ArrayList < String > ();
 Token t;
    label_2:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case EXPORT:{
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(EXPORT);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case VAR_NAME:{
        t = jj_consume_token(VAR_NAME);
exports.add(t.image);
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
universalContext.exportAll();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(SEMICOLON);
    }
{if ("" != null) return exports;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private CustomOperation customOperator() throws ParseException {Token start;
 Token t;
 Token tempName;
 Associativity associativity;
 int precedence;
 String internalName;
 String operatorToken;
 Type type;
 Pair < String, Type > leftType;
 Pair < String, Type > rightType;
 Type returnType;
 Expr body;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INFIX:{
      start = jj_consume_token(INFIX);
associativity = Associativity.NONE;
      break;
      }
    case INFIXR:{
      start = jj_consume_token(INFIXR);
associativity = Associativity.RIGHT;
      break;
      }
    case INFIXL:{
      start = jj_consume_token(INFIXL);
associativity = Associativity.LEFT;
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    t = jj_consume_token(INT_LITERAL);
precedence = Integer.parseInt(t.image);
    t = jj_consume_token(VAR_NAME);
internalName = t.image;
  currentFunctionName = t.image;
    jj_consume_token(OPENBRACKET);
    t = jj_consume_token(CUSTOM_OPERATOR);
operatorToken = t.image;
    jj_consume_token(CLOSEBRACKET);
tempName = null;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VAR_NAME:{
      tempName = jj_consume_token(VAR_NAME);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(LCHEVRON);
    type = type();
leftType = Pair.of(tempName == null ? null : tempName.image, type);
    jj_consume_token(RCHEVRON);
    jj_consume_token(ARROW);
tempName = null;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VAR_NAME:{
      tempName = jj_consume_token(VAR_NAME);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
    jj_consume_token(LCHEVRON);
    type = type();
rightType = Pair.of(tempName == null ? null : tempName.image, type);
    jj_consume_token(RCHEVRON);
    jj_consume_token(ARROW);
    jj_consume_token(LCHEVRON);
    returnType = type();
    jj_consume_token(RCHEVRON);
    jj_consume_token(EQUALS);
    body = expression();
    jj_consume_token(SEMICOLON);
CustomOperation result = new CustomOperation(start.beginLine, associativity, precedence, internalName, operatorToken, leftType, rightType, returnType, body);
   universalContext.addCustomOperation(result);
   {if ("" != null) return result;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private AlgebraicDataType algebraicDataType() throws ParseException {// TODO: Implement ADTs
 Token name;
 List < String > values = new ArrayList < String > ();
 boolean printable = false;
 boolean equatable = false;
 String value;
    label_3:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PRINTABLE:
      case EQUATABLE:{
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PRINTABLE:{
        jj_consume_token(PRINTABLE);
printable = true;
        break;
        }
      case EQUATABLE:{
        jj_consume_token(EQUATABLE);
equatable = true;
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TYPE);
    name = jj_consume_token(VAR_NAME);
    jj_consume_token(EQUALS);
    value = algebraicDataTypeValue();
values.add(value);
    label_4:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PIPE:{
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        break label_4;
      }
      jj_consume_token(PIPE);
      value = algebraicDataTypeValue();
values.add(value);
    }
    jj_consume_token(SEMICOLON);
{if ("" != null) return new AlgebraicDataType(name.image, values);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private String algebraicDataTypeValue() throws ParseException {StringBuilder builder = new StringBuilder();
 Token token;
    token = jj_consume_token(VAR_NAME);
builder.append(token.image);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case LCHEVRON:{
      token = jj_consume_token(LCHEVRON);
builder.append(token.image);
      token = jj_consume_token(VAR_NAME);
builder.append(token.image);
      label_5:
      while (true) {
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case COMMA:{
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_5;
        }
        token = jj_consume_token(COMMA);
builder.append(token.image);
        token = jj_consume_token(VAR_NAME);
builder.append(token.image);
      }
      token = jj_consume_token(RCHEVRON);
builder.append(token.image);
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
{if ("" != null) return builder.toString();}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private RecordTypeDeclaration typeDeclaration() throws ParseException {Token name;
 TypeRecord type;
 boolean printable = false;
 boolean equatable = false;
    label_6:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PRINTABLE:
      case EQUATABLE:{
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_6;
      }
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case PRINTABLE:{
        jj_consume_token(PRINTABLE);
printable = true;
        break;
        }
      case EQUATABLE:{
        jj_consume_token(EQUATABLE);
equatable = true;
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(TYPE);
    name = jj_consume_token(VAR_NAME);
    jj_consume_token(EQUALS);
    type = recordType(name.image);
universalContext.addRecordType(name.image, type);
   {if ("" != null) return new RecordTypeDeclaration(name.image, type, printable, equatable);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private FLPFunction functionDeclaration() throws ParseException {List < String > genericTypes = new ArrayList < String > ();
 Token name;
 Expr expr;
 List < Pair < String, Type > > functionTypes;
 TypeFunction tf;
    name = jj_consume_token(VAR_NAME);
ForteLangPrimeParser.currentFunctionName = name.image;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case OPENBRACKET:{
      jj_consume_token(OPENBRACKET);
      genericTypes = genericTypeDeclaration();
      jj_consume_token(CLOSEBRACKET);
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    functionTypes = functionTypes();
tf = Converter.functionTypesToTypeFunction(functionTypes, genericTypes);
   universalContext.addFunction(name.image, tf);
    jj_consume_token(EQUALS);
    expr = expression();
    jj_consume_token(SEMICOLON);
{if ("" != null) return new FLPFunction(name.beginLine, name.image, tf, expr);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private List < String > genericTypeDeclaration() throws ParseException {Token t;
 List < String > genericNames = new ArrayList < String > ();
    jj_consume_token(LCHEVRON);
    t = jj_consume_token(VAR_NAME);
genericNames.add(t.image);
    jj_consume_token(RCHEVRON);
    label_7:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case COMMA:{
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      jj_consume_token(LCHEVRON);
      t = jj_consume_token(VAR_NAME);
genericNames.add(t.image);
      jj_consume_token(RCHEVRON);
    }
{if ("" != null) return genericNames;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private Expr expression() throws ParseException {Expr expr;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case OPENCBRACE:
    case IF:
    case TRUE:
    case FALSE:
    case PANIC:
    case VAR_NAME:
    case INT_LITERAL:
    case NUMBER:
    case STRING:{
      expr = innerExpression(false);
      break;
      }
    case OPENBRACKET:{
      jj_consume_token(OPENBRACKET);
      expr = innerExpression(true);
      jj_consume_token(CLOSEBRACKET);
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return expr;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private Expr innerExpression(boolean withBrackets) throws ParseException {Expr expr;
 Expr secondaryExpr;
 Token op;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case INT_LITERAL:{
      expr = integer();
      break;
      }
    case NUMBER:{
      expr = doubleVal();
      break;
      }
    case TRUE:
    case FALSE:{
      expr = bool();
      break;
      }
    case STRING:{
      expr = string();
      break;
      }
    case PANIC:{
      expr = panic();
      break;
      }
    case VAR_NAME:{
      expr = variable();
      break;
      }
    case IF:{
      expr = ifStatement();
      break;
      }
    case OPENCBRACE:{
      expr = recordExpr();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_2(2)) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case COLON:
      case PLAY_BUTTON:
      case REVERSE_PLAY_BUTTON:
      case LCHEVRON:
      case RCHEVRON:
      case STAR:
      case CONCAT:
      case PLUS:
      case MINUS:
      case SLASH:
      case HAT:
      case MOD:
      case FULL_STOP:
      case LESS_THAN_OR_EQUAL:
      case GREATER_THAN_OR_EQUAL:
      case EQUALS_EQUALS:
      case NOT_EQUALS:
      case AND_AND:
      case OR_OR:{
        op = standardOperation();
        break;
        }
      case CUSTOM_OPERATOR:{
        op = jj_consume_token(CUSTOM_OPERATOR);
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      secondaryExpr = expression();
expr = new ExprBinaryOp(op.beginLine, expr, secondaryExpr, Operation.from(op.kind, op.image), withBrackets);
    } else {
      ;
    }
{if ("" != null) return expr;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private Token standardOperation() throws ParseException {Token t;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case EQUALS_EQUALS:{
      t = jj_consume_token(EQUALS_EQUALS);
      break;
      }
    case STAR:{
      t = jj_consume_token(STAR);
      break;
      }
    case SLASH:{
      t = jj_consume_token(SLASH);
      break;
      }
    case MINUS:{
      t = jj_consume_token(MINUS);
      break;
      }
    case PLUS:{
      t = jj_consume_token(PLUS);
      break;
      }
    case HAT:{
      t = jj_consume_token(HAT);
      break;
      }
    case FULL_STOP:{
      t = jj_consume_token(FULL_STOP);
      break;
      }
    case MOD:{
      t = jj_consume_token(MOD);
      break;
      }
    case COLON:{
      t = jj_consume_token(COLON);
      break;
      }
    case CONCAT:{
      t = jj_consume_token(CONCAT);
      break;
      }
    case NOT_EQUALS:{
      t = jj_consume_token(NOT_EQUALS);
      break;
      }
    case LCHEVRON:{
      t = jj_consume_token(LCHEVRON);
      break;
      }
    case RCHEVRON:{
      t = jj_consume_token(RCHEVRON);
      break;
      }
    case GREATER_THAN_OR_EQUAL:{
      t = jj_consume_token(GREATER_THAN_OR_EQUAL);
      break;
      }
    case LESS_THAN_OR_EQUAL:{
      t = jj_consume_token(LESS_THAN_OR_EQUAL);
      break;
      }
    case AND_AND:{
      t = jj_consume_token(AND_AND);
      break;
      }
    case OR_OR:{
      t = jj_consume_token(OR_OR);
      break;
      }
    case PLAY_BUTTON:{
      t = jj_consume_token(PLAY_BUTTON);
      break;
      }
    case REVERSE_PLAY_BUTTON:{
      t = jj_consume_token(REVERSE_PLAY_BUTTON);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private ExprRecordConstruction recordExpr() throws ParseException {List < Pair < String, Expr > > values = new ArrayList < Pair < String, Expr > > ();
 Token startingToken;
 Expr base = null;
 Token t;
 Expr expr;
    startingToken = jj_consume_token(OPENCBRACE);
    if (jj_2_3(2)) {
      base = variable();
      jj_consume_token(PIPE);
    } else {
      ;
    }
    label_8:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case VAR_NAME:{
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        break label_8;
      }
      t = jj_consume_token(VAR_NAME);
      jj_consume_token(EQUALS);
      expr = expression();
      jj_consume_token(SEMICOLON);
values.add(Pair.of(t.image, expr));
    }
    jj_consume_token(CLOSECBRACE);
{if ("" != null) return new ExprRecordConstruction(startingToken.beginLine, base, values);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private ExprVariable variable() throws ParseException {Token t;
 List < Expr > expressions = new ArrayList < Expr > ();
 Expr e;
    t = jj_consume_token(VAR_NAME);
    label_9:
    while (true) {
      if (jj_2_4(2)) {
      } else {
        break label_9;
      }
      e = expression();
expressions.add(e);
    }
{if ("" != null) return new ExprVariable(t.beginLine, t.image, ForteLangPrimeParser.currentFunctionName, expressions);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private ExprIfStatement ifStatement() throws ParseException {Token t;
 Expr a;
 Expr b;
 Expr c;
    t = jj_consume_token(IF);
    a = expression();
    jj_consume_token(THEN);
    b = expression();
    jj_consume_token(ELSE);
    c = expression();
{if ("" != null) return new ExprIfStatement(t.beginLine, a, b, c);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private ExprIntLit integer() throws ParseException {Token t;
    t = jj_consume_token(INT_LITERAL);
{if ("" != null) return new ExprIntLit(t.beginLine, Integer.parseInt(t.image));}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private ExprDoubleLit doubleVal() throws ParseException {Token t;
    t = jj_consume_token(NUMBER);
{if ("" != null) return new ExprDoubleLit(t.beginLine, Double.parseDouble(t.image));}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private ExprBoolLit bool() throws ParseException {Token t;
 boolean value;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case TRUE:{
      t = jj_consume_token(TRUE);
value = true;
      break;
      }
    case FALSE:{
      t = jj_consume_token(FALSE);
value = false;
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new ExprBoolLit(t.beginLine, value);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private ExprStringLit string() throws ParseException {Token t;
    t = jj_consume_token(STRING);
{if ("" != null) return new ExprStringLit(t.beginLine, t.image.substring(1, t.image.length() - 1));}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private ExprPanic panic() throws ParseException {Token t;
    t = jj_consume_token(PANIC);
{if ("" != null) return new ExprPanic(t.beginLine);}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private List < Pair < String, Type > > functionTypes() throws ParseException {List < Pair < String, Type > > types = new ArrayList < Pair < String, Type > > ();
 List < Pair < String, Type > > otherTypes = new ArrayList < Pair < String, Type > > ();
 Type t;
 Token varName;
varName = null;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case VAR_NAME:{
      varName = jj_consume_token(VAR_NAME);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      ;
    }
    jj_consume_token(LCHEVRON);
    t = type();
if (varName == null)
   {
    types.add(Pair.of(null, t));
   }
   else
   {
    types.add(Pair.of(varName.image, t));
   }
    jj_consume_token(RCHEVRON);
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case ARROW:{
      jj_consume_token(ARROW);
      otherTypes = functionTypes();
types.addAll(otherTypes);
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
{if ("" != null) return types;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private Type type() throws ParseException {Token t;
 Type type;
    switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
    case TYPE_INT:{
      jj_consume_token(TYPE_INT);
type = new TypeInt();
      break;
      }
    case TYPE_STRING:{
      jj_consume_token(TYPE_STRING);
type = new TypeString();
      break;
      }
    case TYPE_BOOL:{
      jj_consume_token(TYPE_BOOL);
type = new TypeBool();
      break;
      }
    case TYPE_DOUBLE:{
      jj_consume_token(TYPE_DOUBLE);
type = new TypeDouble();
      break;
      }
    case VAR_NAME:{
      t = jj_consume_token(VAR_NAME);
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case LCHEVRON:{
        jj_consume_token(LCHEVRON);
        type();
        jj_consume_token(RCHEVRON);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
type = new TypeUnresolvedNamed(t.image);
      break;
      }
    case OPENBRACKET:{
      jj_consume_token(OPENBRACKET);
Type temp1;
   Type temp2;
   List < Type > right = new ArrayList < Type > ();
      temp1 = type();
      label_10:
      while (true) {
        jj_consume_token(ARROW);
        temp2 = type();
right.add(temp2);
        switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
        case ARROW:{
          break;
          }
        default:
          jj_la1[26] = jj_gen;
          break label_10;
        }
      }
      jj_consume_token(CLOSEBRACKET);
type = new TypeLambda(temp1, right);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type;}
    throw new IllegalStateException ("Missing return statement in function");
}

  final private TypeRecord recordType(String name) throws ParseException {List < Pair < String, Type > > types = new ArrayList < Pair < String, Type > > ();
 Token t;
 Type type;
    jj_consume_token(OPENCBRACE);
    label_11:
    while (true) {
      switch (jj_ntk == -1 ? jj_ntk_f() : jj_ntk) {
      case VAR_NAME:{
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        break label_11;
      }
      t = jj_consume_token(VAR_NAME);
      jj_consume_token(LCHEVRON);
      type = type();
      jj_consume_token(RCHEVRON);
      jj_consume_token(SEMICOLON);
types.add(Pair.of(t.image, type));
    }
    jj_consume_token(CLOSECBRACE);
{if ("" != null) return new TypeRecord(name, types);}
    throw new IllegalStateException ("Missing return statement in function");
}

  private boolean jj_2_1(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla;
    jj_scanpos = token;
    jj_lastpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_3R_27()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3R_28()
 {
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_29()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_30()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    if (jj_scan_token(VAR_NAME)) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_scan_token(56)) return true;
    }
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_32()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_13()
 {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_33()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) return true;
    }
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  private boolean jj_3R_12()
 {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(VAR_NAME)) return true;
    if (jj_scan_token(EQUALS)) return true;
    return false;
  }

  private boolean jj_3R_15()
 {
    if (jj_scan_token(VAR_NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_17()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) {
    jj_scanpos = xsp;
    if (jj_scan_token(7)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(28)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(32)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_16()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  private boolean jj_3R_20()
 {
    if (jj_scan_token(PRINTABLE)) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  private boolean jj_3R_21()
 {
    if (jj_scan_token(EQUATABLE)) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_scan_token(STRING)) return true;
    return false;
  }

  private boolean jj_3R_14()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) return true;
    }
    return false;
  }

  private boolean jj_3R_18()
 {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  private boolean jj_3R_19()
 {
    if (jj_scan_token(OPENBRACKET)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_scan_token(PANIC)) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_22()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    }
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_23()
 {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_scan_token(OPENCBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_40()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(CLOSECBRACE)) return true;
    return false;
  }

  private boolean jj_3R_31()
 {
    if (jj_scan_token(INT_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_24()
 {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_15()) return true;
    if (jj_scan_token(PIPE)) return true;
    return false;
  }

  private boolean jj_3R_25()
 {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_26()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ForteLangPrimeParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[29];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xc0000,0x0,0xc0000,0x0,0x20000,0x0,0x0,0x0,0xc0000,0xc0000,0x2000,0x400,0x8000,0xc0000,0xc0000,0x2,0x400,0xa,0x8,0xfff39880,0xfff39880,0x0,0x0,0x0,0x200,0x8000,0x200,0x2,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x100e20,0xe00,0x100020,0x20000,0x100000,0xe00,0x100000,0x100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xf07040,0xf07040,0x1000001,0x1,0x100000,0x3000,0x100000,0x0,0x0,0x0,0x10001e,0x100000,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
	}
  private final JJCalls[] jj_2_rtns = new JJCalls[4];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /**
   * Constructor with InputStream.
   * @param stream char stream
   */
  public ForteLangPrimeParser(final Provider stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new ForteLangPrimeParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 29; i++)
     jj_la1[i] = -1;
   for (int i = 0; i < jj_2_rtns.length; i++)
     jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Constructor with InputStream.
   * @param sDSL String representation to be parsed
   */
  public ForteLangPrimeParser(final String sDSL) {
	   this(new StringProvider(sDSL));
  }

  /**
   * Reinitialise.
   * @param sDSL String representation to be parsed
   */
  public void ReInit(final String sDSL) {
	  ReInit(new StringProvider(sDSL));
  }
  /**
   * Reinitialise
   * @param stream char stream
   */
  public void ReInit(final Provider stream) {
	if (jj_input_stream == null) {
	  jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	  jj_input_stream.reInit(stream, 1, 1);
  }
	if (token_source == null) {
 token_source = new ForteLangPrimeParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
   for (int i = 0; i < 29; i++)
     jj_la1[i] = -1;
   for (int i = 0; i < jj_2_rtns.length; i++)
     jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Constructor with generated Token Manager.
   * @param tm Token manager to use
   */
  public ForteLangPrimeParser(final ForteLangPrimeParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /**
   * Reinitialise
   * @param tm Token manager to use
   */
  public void ReInit(final ForteLangPrimeParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 29; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(final int kind) throws ParseException {
    final Token oldToken = token;
    if (token.next != null)
      token = token.next;
    else {
      token.next = token_source.getNextToken();
      token = token.next;
    }
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen)
              c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  private static final class LookaheadSuccess extends IllegalStateException {}
  private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		   jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		   jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


  /**
   * @return the next Token.
   */
  public final Token getNextToken() {
   if (token.next != null)
     token = token.next;
   else
     token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

  /**
   * @param index index to be retrieved
   * @return the specific Token.
   */
  public final Token getToken(final int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next == null)
        t.next = token_source.getNextToken();
      t = t.next;
    }
    return t;
  }

  private int jj_ntk_f() {
    jj_nt = token.next;
    if (jj_nt == null) {
      token.next = token_source.getNextToken();
      jj_ntk = token.next.kind;
      return jj_ntk;
    }
    jj_ntk = jj_nt.kind;
    return jj_ntk;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
  if (pos >= 100) {
    return;
  }

  if (pos == jj_endpos + 1) {
    jj_lasttokens[jj_endpos++] = kind;
  } else if (jj_endpos != 0) {
    jj_expentry = new int[jj_endpos];

    for (int i = 0; i < jj_endpos; i++) {
      jj_expentry[i] = jj_lasttokens[i];
    }

    for (final int[] oldentry : jj_expentries) {
      if (oldentry.length == jj_expentry.length) {
        boolean isMatched = true;
        for (int i = 0; i < jj_expentry.length; i++) {
          if (oldentry[i] != jj_expentry[i]) {
            isMatched = false;
            break;
          }
        }
        if (isMatched) {
          jj_expentries.add(jj_expentry);
          break;
        }
      }
    }

    if (pos != 0) {
      jj_endpos = pos;
      jj_lasttokens[jj_endpos - 1] = kind;
    }
  }
}

  /**
   * Generate ParseException.
   * @return new Exception object. Never <code>null</code>
   */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[67];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 29; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 67; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage, token_source == null ? null : ForteLangPrimeParserTokenManager.lexStateNames[token_source.curLexState]);
  }

  /**
   * @return Always <code>false</code>.
   */
  public final boolean trace_enabled() {
    return false;
  }

  /** Enable tracing. */
  public final void enable_tracing() {}

  /** Disable tracing. */
  public final void disable_tracing() {}

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
      try {
        JJCalls p = jj_2_rtns[i];
        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg;
            jj_scanpos = p.first;
            jj_lastpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
            }
          }
          p = p.next;
        } while (p != null);
      } catch(LookaheadSuccess ls) { /* ignore */ }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) {
        p.next = new JJCalls();
        p = p.next;
        break;
      }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
